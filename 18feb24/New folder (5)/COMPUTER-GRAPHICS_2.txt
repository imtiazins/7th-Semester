------------------------------------------------------------------------------------
QUESTION:-1 - Write a program to implement DDA(Digital Differential Analyzer) line drawing algorithm.
------------------------------------------------------------------------------------

#include <iostream>
#include <graphics.h>

int main() {
    int gd = DETECT, gm, i;
    float x, y, dx, dy, steps;
    int x0, x1, y0, y1;
    initgraph(&gd, &gm, "");

    x0 = 100, y0 = 200, x1 = 500, y1 = 300;
    dx = (float)(x1 - x0);
    dy = (float)(y1 - y0);

    if (dx >= dy) {
        steps = dx;
    } else {
        steps = dy;
    }

    dx = dx / steps;
    dy = dy / steps;
    x = x0;
    y = y0;
    i = 1;

    while (i <= steps) {
        putpixel(x, y, RED);
        x += dx;
        y += dy;
        i = i + 1;
    }

    getch();
    closegraph();
    return 0;
}


/*also in C

    #include<graphics.h>  
    #include<conio.h>  
    #include<stdio.h>  
    void main()  
    {  
        intgd = DETECT ,gm, i;  
        float x, y,dx,dy,steps;  
        int x0, x1, y0, y1;  
        initgraph(&gd, &gm, "C:\\TC\\BGI");  
        setbkcolor(WHITE);  
        x0 = 100 , y0 = 200, x1 = 500, y1 = 300;  
        dx = (float)(x1 - x0);  
        dy = (float)(y1 - y0);  
        if(dx>=dy)  
               {  
            steps = dx;  
        }  
        else  
               {  
            steps = dy;  
        }  
        dx = dx/steps;  
        dy = dy/steps;  
        x = x0;  
        y = y0;  
        i = 1;  
        while(i<= steps)  
        {  
            putpixel(x, y, RED);  
            x += dx;  
            y += dy;  
            i=i+1;  
        }  
        getch();  
        closegraph();  
    }  */

-----------------------------------------------------------------------------
QUESTION:-2. Write a program to implement Bresenham's line drawing algorithm.
---------------------------------------------------------------------------
#include<iostream.h>
#include<graphics.h>
 
void drawline(int x0, int y0, int x1, int y1)
{
    int dx, dy, p, x, y;
 
dx=x1-x0;
dy=y1-y0;
 
x=x0;
y=y0;
 
p=2*dy-dx;
 
while(x<x1)
{
if(p>=0)
{
putpixel(x,y,7);
y=y+1;
p=p+2*dy-2*dx;
}
else
{
putpixel(x,y,7);
p=p+2*dy;
}
x=x+1;
}
}
 
int main()
{
int gdriver=DETECT, gmode, error, x0, y0, x1, y1;
initgraph(&gdriver, &gmode, "c:\\turboc3\\bgi");
 
cout<<"Enter co-ordinates of first point: ";
cin>>x0>>y0;
 
cout<<"Enter co-ordinates of second point: ";
cin>>x1>>y1;
drawline(x0, y0, x1, y1);
 
return 0;
}

------------------------------------------------------------------------------
QUESTION:-3. Write a program to implement Bresenham's circle drawing algorithm. 
-------------------------------------------------------------------------------

#include <graphics.h>
#include <iostream>

using namespace std;

class bresen {
    float x, y, a, b, r, p;

public:
    void get();
    void cal();
};

void bresen::get() {
    cout << "ENTER CENTER AND RADIUS" << endl;
    cout << "ENTER (a, b): ";
    cin >> a >> b;
    cout << "ENTER r: ";
    cin >> r;
}

void bresen::cal() {
    int gdriver = DETECT, gmode, errorcode;
    int midx, midy, i;
    initgraph(&gdriver, &gmode, "");

    errorcode = graphresult();
    if (errorcode != grOK) {
        cout << "Graphics error: " << grapherrormsg(errorcode) << endl;
        cout << "Press any key to halt:";
        getch();
        exit(1);
    }

    x = 0;
    y = r;
    putpixel(a, b + r, RED);
    putpixel(a, b - r, RED);
    putpixel(a - r, b, RED);
    putpixel(a + r, b, RED);
    p = 5 / 4 - r;

    while (x <= y) {
        if (p < 0)
            p += (4 * x) + 6;
        else {
            p += (2 * (x - y)) + 5;
            y--;
        }
        x++;
        putpixel(a + x, b + y, RED);
        putpixel(a - x, b + y, RED);
        putpixel(a + x, b - y, RED);
        putpixel(a - x, b - y, RED);
        putpixel(a + y, b + x, RED);
        putpixel(a - y, b + x, RED);
        putpixel(a + y, b - x, RED);
        putpixel(a - y, b - x, RED);
    }
}

int main() {
    bresen b;
    b.get();
    b.cal();
    getch();
    closegraph();
    return 0;
}

-------------------------------------------------------------------------------
QUESTION:-4. Write a program to implement Midpoint circle drawing algorithm. 
-----------------------------------------------------------------------------

#include <iostream>
#include <graphics.h>

using namespace std;

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    int xc, yc, radius;
    cout << "Enter the center coordinates of the circle (x y): ";
    cin >> xc >> yc;
    cout << "Enter the radius of the circle: ";
    cin >> radius;

    int x = 0;
    int y = radius;
    int p = 1 - radius;

    while (x <= y) {
        putpixel(xc + x, yc + y, WHITE);
        putpixel(xc + y, yc + x, WHITE);
        putpixel(xc - x, yc + y, WHITE);
        putpixel(xc - y, yc + x, WHITE);
        putpixel(xc + x, yc - y, WHITE);
        putpixel(xc + y, yc - x, WHITE);
        putpixel(xc - x, yc - y, WHITE);
        putpixel(xc - y, yc - x, WHITE);

        if (p <= 0) {
            x++;
            p += 2 * x + 1;
        } else {
            y--;
            x++;
            p += 2 * (x - y) + 1;
        }
    }

    getch();
    closegraph();
    return 0;
}

------------------------------------------------------------------------------
QUESTION:-5. Write a program to implement Midpoint ellipse drawing algorithm.
---------------------------------------------------------------------------------

#include <graphics.h>
#include <iostream>

using namespace std;

class bresen {
    float x, y, a, b, r, p, h, k, p1, p2;

public:
    void get();
    void cal();
};

void bresen::get() {
    cout << "ENTER CENTER OF ELLIPSE" << endl;
    cout << "ENTER (h, k): ";
    cin >> h >> k;
    cout << "ENTER LENGTH OF MAJOR AND MINOR AXIS" << endl;
    cin >> a >> b;
}

void bresen::cal() {
    int gdriver = DETECT, gmode, errorcode;
    int midx, midy, i;
    initgraph(&gdriver, &gmode, "");

    errorcode = graphresult();
    if (errorcode != grOK) {
        cout << "Graphics error: " << grapherrormsg(errorcode) << endl;
        cout << "Press any key to halt:";
        getch();
        exit(1);
    }

    x = 0;
    y = b;
    // REGION 1
    p1 = (b * b) - (a * a * b) + (a * a) / 4;
    while (2 * b * b * x < 2 * a * a * y) {
        putpixel(x + h, y + k, RED);
        putpixel(-x + h, -y + k, RED);
        putpixel(x + h, -y + k, RED);
        putpixel(-x + h, y + k, RED);
        if (p1 < 0)
            p1 += (2 * b * b * (x + 1)) - (2 * a * a * (y - 1)) + b * b;
        else {
            p1 += (2 * b * b * (x + 1)) - (2 * a * a * (y - 1)) - b * b;
            y--;
        }
        x++;
    }
    // REGION 2
    p2 = (b * b) * (x + 0.5) + (a * a) * (y - 1) * (y - 1) - a * a * b * b;
    while (y >= 0) {
        if (p2 > 0)
            p2 = p2 - 2 * a * a * (y - 1) + a * a;
        else {
            p2 = p2 - 2 * a * a * (y - 1) + 2 * b * b * (x + 1) + a * a;
            x++;
        }
        y--;
        putpixel(x + h, y + k, RED);
        putpixel(-x + h, -y + k, RED);
        putpixel(x + h, -y + k, RED);
        putpixel(-x + h, y + k, RED);
    }

    getch();
}

int main() {
    bresen b;
    b.get();
    b.cal();
    closegraph();
    return 0;
}

-----------------------------------------------------------------------------------
QUESTION:-6. Write a program to implement Polygon(Rectangle) filling algorithm.
-----------------------------------------------------------------------------------


#include <iostream>
#include <graphics.h>
#include <dos.h>

void flood(int, int, int, int);

int main() {
    int gd, gm = DETECT;
    clrscr();
    detectgraph(&gd, &gm);
    initgraph(&gd, &gm, "c:\\tc\\bgi");
    rectangle(50, 50, 100, 100);
    flood(55, 55, 12, 0);
    getch();
    closegraph();
    return 0;
}

void flood(int x, int y, int fill_col, int old_col) {
    if (getpixel(x, y) == old_col) {
        delay(10);
        putpixel(x, y, fill_col);
        flood(x + 1, y, fill_col, old_col);
        flood(x - 1, y, fill_col, old_col);
        flood(x, y + 1, fill_col, old_col);
        flood(x, y - 1, fill_col, old_col);
    }
}

-------------------------------------------------------------------------------------
QUESTION:-7. Write a program to implement 2D transformation(Translation, Rotation). 
8. Write a program to implement 2D transformation(Scaling, Translation). 
--------------------------------------------------------------------------------------
#include <iostream>
#include <graphics.h>
#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <math.h>

using namespace std;

int main() {
    int gm;
    int gd = DETECT;
    int x1, x2, x3, y1, y2, y3, nx1, nx2, nx3, ny1, ny2, ny3, c;
    int sx, sy, xt, yt, r;
    float t;
    initgraph(&gd, &gm, "c:\\tc\\bg:");
    cout << "\t Program for basic transactions";
    cout << "\n\t Enter the points of triangle" << endl;
    setcolor(1);
    cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;
    line(x1, y1, x2, y2);
    line(x2, y2, x3, y3);
    line(x3, y3, x1, y1);
    getch();
    cout << "\n 1.Transaction\n 2.Rotation\n 3.Scaling\n 4.Exit" << endl;
    cout << "Enter your choice: ";
    cin >> c;
    switch (c) {
        case 1:
            cout << "\n Enter the translation factor" << endl;
            cin >> xt >> yt;
            nx1 = x1 + xt;
            ny1 = y1 + yt;
            nx2 = x2 + xt;
            ny2 = y2 + yt;
            nx3 = x3 + xt;
            ny3 = y3 + yt;
            line(nx1, ny1, nx2, ny2);
            line(nx2, ny2, nx3, ny3);
            line(nx3, ny3, nx1, ny1);
            getch();
            break;

        case 2:
            cout << "\n Enter the angle of rotation" << endl;
            cin >> r;
            t = 3.14 * r / 180;
            nx1 = abs(x1 * cos(t) - y1 * sin(t));
            ny1 = abs(x1 * sin(t) + y1 * cos(t));
            nx2 = abs(x2 * cos(t) - y2 * sin(t));
            ny2 = abs(x2 * sin(t) + y2 * cos(t));
            nx3 = abs(x3 * cos(t) - y3 * sin(t));
            ny3 = abs(x3 * sin(t) + y3 * cos(t));
            line(nx1, ny1, nx2, ny2);
            line(nx2, ny2, nx3, ny3);
            line(nx3, ny3, nx1, ny1);
            getch();
            break;

        case 3:
            cout << "\n Enter the scaling factor" << endl;
            cin >> sx >> sy;
            nx1 = x1 * sx;
            ny1 = y1 * sy;
            nx2 = x2 * sx;
            ny2 = y2 * sy;
            nx3 = x3 * sx;
            ny3 = y3 * sy;
            line(nx1, ny1, nx2, ny2);
            line(nx2, ny2, nx3, ny3);
            line(nx3, ny3, nx1, ny1);
            getch();
            break;

        case 4:
            break;

        default:
            cout << "Enter the correct choice" << endl;
    }

    closegraph();
    return 0;
}


---------------------------------------------------------------------------
QUESTION:-10. Write a program to implement Cohen-Sutherland line clipping algorithm.
-------------------------------------------------------------------------------------

#include<iostream.h>
#include<stdlib.h>
#include<math.h>
#include<graphics.h>
#include<dos.h>
 
typedef struct coordinate
{
int x,y;
char code[4];
}PT;
 
void drawwindow();
void drawline(PT p1,PT p2);
PT setcode(PT p);
int visibility(PT p1,PT p2);
PT resetendpt(PT p1,PT p2);
 
void main()
{
int gd=DETECT,v,gm;
PT p1,p2,p3,p4,ptemp;
cout<<"\nEnter x1 and y1\n";
cin>>p1.x>>p1.y;
cout<<"\nEnter x2 and y2\n";
cin>>p2.x>>p2.y;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
drawwindow();
delay(500);
drawline(p1,p2);
delay(500);
cleardevice();
delay(500);
p1=setcode(p1);
p2=setcode(p2);
v=visibility(p1,p2);
delay(500);
switch(v)
{
case 0: drawwindow();
delay(500);
drawline(p1,p2);
break;
case 1: drawwindow();
delay(500);
break;
case 2: p3=resetendpt(p1,p2);
p4=resetendpt(p2,p1);
drawwindow();
delay(500);
drawline(p3,p4);
break;
}
delay(5000);
closegraph();
}
 
void drawwindow()
{
line(150,100,450,100);
line(450,100,450,350);
line(450,350,150,350);
line(150,350,150,100);
}
 
void drawline(PT p1,PT p2)
{
line(p1.x,p1.y,p2.x,p2.y);
}
 
PT setcode(PT p) //for setting the 4 bit code
{
PT ptemp;
if(p.y<100)
ptemp.code[0]='1'; //Top
else
ptemp.code[0]='0';
if(p.y>350)
ptemp.code[1]='1'; //Bottom
else
ptemp.code[1]='0';
if(p.x>450)
ptemp.code[2]='1'; //Right
else
ptemp.code[2]='0';
if(p.x<150)
ptemp.code[3]='1'; //Left
else
ptemp.code[3]='0';
ptemp.x=p.x;
ptemp.y=p.y;
return(ptemp);
}
 
int visibility(PT p1,PT p2)
{
int i,flag=0;
for(i=0;i<4;i++)
{
if((p1.code[i]!='0') || (p2.code[i]!='0'))
flag=1;
}
if(flag==0)
return(0);
for(i=0;i<4;i++)
{
if((p1.code[i]==p2.code[i]) && (p1.code[i]=='1'))
flag='0';
}
if(flag==0)
return(1);
return(2);
}
 
PT resetendpt(PT p1,PT p2)
{
PT temp;
int x,y,i;
float m,k;
if(p1.code[3]=='1')
x=150;
if(p1.code[2]=='1')
x=450;
if((p1.code[3]=='1') || (p1.code[2]=='1'))
{
m=(float)(p2.y-p1.y)/(p2.x-p1.x);
k=(p1.y+(m*(x-p1.x)));
temp.y=k;
temp.x=x;
for(i=0;i<4;i++)
temp.code[i]=p1.code[i];
if(temp.y<=350 && temp.y>=100)
return (temp);
}
if(p1.code[0]=='1')
y=100;
if(p1.code[1]=='1')
y=350;
if((p1.code[0]=='1') || (p1.code[1]=='1'))
{
m=(float)(p2.y-p1.y)/(p2.x-p1.x);
k=(float)p1.x+(float)(y-p1.y)/m;
temp.x=k;
temp.y=y;
for(i=0;i<4;i++)
temp.code[i]=p1.code[i];
return(temp);
}
else
return(p1);
}



-------------------------------------------------------------------------
QUESTION:-11 sUtherland_hodgman_polygon
---------------------------------------------------------------------

#include <iostream>
#include <graphics.h>

using namespace std;

int points[80][2] = { { 0 } }, new_points[80][2] = { { 0 } };

int leftClip(int, int);
int topClip(int, int);
int rightClip(int, int);
int bottomClip(int, int);

int main() {
    int gd = DETECT, gm, xmin, ymin, xmax, ymax, n, i;
    
    cout << "Enter the co-ordinates of top left corner of the clipping window: ";
    cin >> xmin >> ymin;
    
    cout << "Enter the co-ordinates of bottom right corner of the clipping window: ";
    cin >> xmax >> ymax;

    cout << "Enter the number of co-ordinates of the polygon: ";
    cin >> n;

    for (i = 0; i < n; i++) {
        cout << "Enter the co-ordinates of vertex " << (i + 1) << ": ";
        cin >> points[i][0] >> points[i][1];
    }

    initgraph(&gd, &gm, NULL);
    rectangle(xmin, ymin, xmax, ymax);

    for (i = 0; i < n; i++)
        line(points[i][0], points[i][1], points[(i + 1) % n][0], points[(i + 1) % n][1]);

    int result = leftClip(n, xmin);
    result = topClip(result, ymin);
    result = rightClip(result, xmax);
    result = bottomClip(result, ymax);

    delay(3000);
    cleardevice();
    rectangle(xmin, ymin, xmax, ymax);

    for (i = 0; i < result; i++)
        line(points[i][0], points[i][1], points[(i + 1) % result][0], points[(i + 1) % result][1]);

    closegraph();
    return 0;
}

int leftClip(int limit, int xmin) {
    int i, j = 0, x1, y1, x2, y2;
    float m;
    for (i = 0; i < limit; i++) {
        x1 = points[i][0];
        y1 = points[i][1];
        x2 = points[(i + 1) % limit][0];
        y2 = points[(i + 1) % limit][1];
        if (x2 - x1)
            m = (y2 - y1) * 1.0 / (x2 - x1);

        if (x1 < xmin && x2 < xmin)
            continue;
        if (x1 > xmin && x2 > xmin) {
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
            continue;
        }
        if (x1 > xmin && x2 < xmin) {
            new_points[j][0] = xmin;
            new_points[j++][1] = y1 + m * (xmin - x1);
            continue;
        }
        if (x1 < xmin && x2 > xmin) {
            new_points[j][0] = xmin;
            new_points[j++][1] = y1 + m * (xmin - x1);
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
        }
    }

    for (i = 0; i < j; i++) {
        points[i][0] = new_points[i][0];
        points[i][1] = new_points[i][1];
        new_points[i][0] = new_points[i][1] = 0;
    }

    if (j < limit)
        for (; i < limit; i++)
            points[i][0] = points[i][1] = 0;

    return j;
}

int topClip(int limit, int ymin) {
    int i, j = 0, x1, y1, x2, y2;
    float m;
    for (i = 0; i < limit; i++) {
        x1 = points[i][0];
        y1 = points[i][1];
        x2 = points[(i + 1) % limit][0];
        y2 = points[(i + 1) % limit][1];
        if (x2 - x1)
            m = (y2 - y1) * 1.0 / (x2 - x1);

        if (y1 < ymin && y2 < ymin)
            continue;
        if (y1 > ymin && y2 > ymin) {
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
            continue;
        }
        if (y1 > ymin && y2 < ymin) {
            new_points[j][0] = x1 + (ymin - y1) / m;
            new_points[j++][1] = ymin;
            continue;
        }
        if (y1 < ymin && y2 > ymin) {
            new_points[j][0] = x1 + (ymin - y1) / m;
            new_points[j++][1] = ymin;
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
        }
    }

    for (i = 0; i < j; i++) {
        points[i][0] = new_points[i][0];
        points[i][1] = new_points[i][1];
        new_points[i][0] = new_points[i][1] = 0;
    }

    if (j < limit)
        for (; i < limit; i++)
            points[i][0] = points[i][1] = 0;

    return j;
}

int rightClip(int limit, int xmax) {
    int i, j = 0, x1, y1, x2, y2;
    float m;
    for (i = 0; i < limit; i++) {
        x1 = points[i][0];
        y1 = points[i][1];
        x2 = points[(i + 1) % limit][0];
        y2 = points[(i + 1) % limit][1];
        if (x2 - x1)
            m = (y2 - y1) * 1.0 / (x2 - x1);

        if (x1 > xmax && x2 > xmax)
            continue;
        if (x1 < xmax && x2 < xmax) {
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
            continue;
        }
        if (x1 < xmax && x2 > xmax) {
            new_points[j][0] = xmax;
            new_points[j++][1] = y1 + m * (xmax - x1);
            continue;
        }
        if (x1 > xmax && x2 < xmax) {
            new_points[j][0] = xmax;
            new_points[j++][1] = y1 + m * (xmax - x1);
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
        }
    }

    for (i = 0; i < j; i++) {
        points[i][0] = new_points[i][0];
        points[i][1] = new_points[i][1];
        new_points[i][0] = new_points[i][1] = 0;
    }

    if (j < limit)
        for (; i < limit; i++)
            points[i][0] = points[i][1] = 0;

    return j;
}

int bottomClip(int limit, int ymax) {
    int i, j = 0, x1, y1, x2, y2;
    float m;
    for (i = 0; i < limit; i++) {
        x1 = points[i][0];
        y1 = points[i][1];
        x2 = points[(i + 1) % limit][0];
        y2 = points[(i + 1) % limit][1];
        if (x2 - x1)
            m = (y2 - y1) * 1.0 / (x2 - x1);

        if (y1 > ymax && y2 > ymax)
            continue;
        if (y1 < ymax && y2 < ymax) {
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
            continue;
        }
        if (y1 < ymax && y2 > ymax) {
            new_points[j][0] = x1 + (ymax - y1) / m;
            new_points[j++][1] = ymax;
            continue;
        }
        if (y1 > ymax && y2 < ymax) {
            new_points[j][0] = x1 + (ymax - y1) / m;
            new_points[j++][1] = ymax;
            new_points[j][0] = x2;
            new_points[j++][1] = y2;
        }
    }

    for (i = 0; i < j; i++) {
        points[i][0] = new_points[i][0];
        points[i][1] = new_points[i][1];
        new_points[i][0] = new_points[i][1] = 0;
    }

    if (j < limit)
        for (; i < limit; i++)
            points[i][0] = points[i][1] = 0;

    return j;
}


-----------------------------------------------------------------
QUESTION:-12 point_to_point_rotation_triangle
-----------------------------------------------------------

#include <iostream>
#include <graphics.h>
#include <math.h>

using namespace std;

int main() {
    int gd = 0, gm, x1, y1, x2, y2;
    double s, c, angle;
    
    initgraph(&gd, &gm, "C:\\TC\\BGI");
    
    setcolor(RED);
    cout << "Enter coordinates of line: ";
    cin >> x1 >> y1 >> x2 >> y2;
    
    cleardevice();
    setbkcolor(WHITE);
    line(x1, y1, x2, y2);
    getch();
    
    setbkcolor(BLACK);
    cout << "Enter rotation angle: ";
    cin >> angle;
    setbkcolor(WHITE);
    
    c = cos(angle * M_PI / 180);
    s = sin(angle * M_PI / 180);
    
    int new_x1 = floor(x1 * c + y1 * s);
    int new_y1 = floor(-x1 * s + y1 * c);
    int new_x2 = floor(x2 * c + y2 * s);
    int new_y2 = floor(-x2 * s + y2 * c);
    
    cleardevice();
    line(new_x1, new_y1, new_x2, new_y2);
    getch();
    
    closegraph();
    return 0;
}